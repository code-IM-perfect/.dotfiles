#![enable(implicit_some)]
#![enable(unwrap_newtypes)]
#![enable(unwrap_variant_newtypes)]
(
    default_album_art_path: None,
    show_song_table_header: true,
    draw_borders: true,
    browser_column_widths: [15, 48, 35],
    background_color: None,
    text_color: None,
    header_background_color: None,
    modal_background_color: None,
    tab_bar: (
        enabled: true,
        active_style: (fg: "black", bg: "blue", modifiers: "Bold"),
        inactive_style: (),
    ),
    highlighted_item_style: (fg: "green", modifiers: "Bold"),
    current_item_style: (fg: "black", bg: "blue", modifiers: "Bold"),
    borders_style: (fg: "blue"),
    highlight_border_style: (fg: "blue"),
    symbols: (song: "üéµ", dir: "üìÅ", marker: "* ", ellipsis: "..."),
    progress_bar: (
        symbols: ["=", ">", " "],
        track_style: (fg: "#1e2030"),
        elapsed_style: (fg: "blue"),
        thumb_style: (fg: "blue", bg: "#1e2030"),
    ),
    scrollbar: (
        symbols: ["‚îÇ", "‚ñà", "‚ñ≤", "‚ñº"],
        track_style: (),
        ends_style: (),
        thumb_style: (fg: "blue"),
    ),
    song_table_format: [
        (
            prop: (kind: Property(Artist),
                default: (kind: Text("Unknown"))
            ),
            width: "20%",
        ),
        (
            prop: (kind: Property(Title),
                default: (kind: Text("Unknown"))
            ),
            width: "35%",
        ),
        (
            prop: (kind: Property(Album), style: (fg: "white"),
                default: (kind: Text("Unknown Album"), style: (fg: "white"))
            ),
            width: "30%",
        ),
        (
            prop: (kind: Property(Duration),
                default: (kind: Text("-"))
            ),
            width: "15%",
            alignment: Right,
        ),
    ],
    layout: Split(
        direction: Vertical,
        panes: [
            (
                pane: Pane(Tabs),
                size: "3",
            ),
            (
                pane: Pane(TabContent),
                size: "100%",
            ),
            (
                pane: Pane(Header),
                size: "3",
                borders: "TOP"
            ),
            (
                pane: Pane(ProgressBar),
                size: "1",
            ),
        ],
    ),
    header: (
        rows: [
            (
                left: [
                    (kind: Text("["), style: (fg: "blue", modifiers: "Bold")),
                    (kind: Property(Status(StateV2(playing_label: "Playing", paused_label: "Paused", stopped_label: "Stopped"))), style: (fg: "blue", modifiers: "Bold")),
                    (kind: Text("]"), style: (fg: "blue", modifiers: "Bold"))
                ],
                center: [
                    (kind: Property(Song(Title)), style: (fg: "light_red", modifiers: "Bold"),
                        default: (kind: Text("No Song"), style: (fg: "green", modifiers: "Bold"))
                    )
                ],
                right: [
                    (kind: Property(Widget(Volume)), style: (fg: "blue"))
                ]
            ),
            (
                left: [
                    (kind: Property(Status(Elapsed))),
                    (kind: Text(" / ")),
                    (kind: Property(Status(Duration))),
                    (kind: Text(" ("), style: (fg: "white")),
                    (kind: Property(Status(Bitrate)), style: (fg: "white")),
                    (kind: Text(" kbps)"), style: (fg: "white")),
                ],
                center: [
                    (kind: Property(Song(Artist)), style: (fg: "green", modifiers: "Bold"),
                        default: (kind: Text("Unknown"), style: (fg: "yellow", modifiers: "Bold"))
                    ),
                    (kind: Text(" - ")),
                    (kind: Property(Song(Album)),
                        style: (fg: "green"),
                        default: (kind: Text("Unknown Album"))
                    )
                ],
                right: [
                    (
                        kind: Property(Widget(States(
                            active_style: (fg: "white", modifiers: "Bold"),
                            separator_style: (fg: "white")))
                        ),
                        style: (fg: "dark_gray")
                    ),
                ]
            ),
        ],
    ),
    browser_song_format: [
        (
            kind: Group([
                (kind: Property(Track)),
                (kind: Text(" ")),
            ])
        ),
        (
            kind: Group([
                (kind: Property(Title)),
                (kind: Text(" - ")),
                (kind: Property(Artist)),
            ]),
            default: (kind: Property(Filename))
        ),
    ],
    cava: (
        // symbols that will be used to draw the bar in the visualiser,
        // in ascending order of fill fraction
        bar_symbols: ['‚ñÅ', '‚ñÇ', '‚ñÉ', '‚ñÑ', '‚ñÖ', '‚ñÜ', '‚ñá', '‚ñà'],

        bg_color: None, // background color, defaults to rmpc's bg color if not provided
        bar_width: 1, // width of a single bar in columns
        bar_spacing: 1, // free space between bars in columns

        // Possible values are "Top", "Bottom" and "Horizontal".
        // "Horizontal" is basically Center
        orientation: Horizontal,

        // Colors can be configured in three different ways: a single color, different colors
        // per row and a gradient. You can use the same colors as everywhere else. Only specify
        // one of these:

        // Every bar symbol will be red
        // bar_color: Single("blue"),

        // The first two rows(two lowest amplitudes) will be red, after that two green rows
        // and the rest will be blue. You can have as many as you want here. The last value
        // will be used if the height exceeds the length of this array.
        // bar_color: Rows([
        //     "red",
        //     "red",
        //     "green",
        //     "green",
        //     "blue",
        // ])

        // A simple color gradient. This is a map where keys are percent values of the height
        // where the color starts. After that it is linearly interpolated towards the next value.
        // In this example, the color will start at green for the lowest amplitudes, go towards
        // blue at half amplitudes and finishing as red for the highest values. Keys must be between
        // 0 and 100 and if the first or last key are not 0 and 100 respectively, the lowest and highest
        // value will be used as 0 and 100. Only hex and RGB colors are supported here and your terminal
        // must support them as well!
        // bar_color: Gradient({
        //       0: "rgb(  0, 255,   0)",
        //      50: "rgb(  0,   0, 255)",
        //     100: "rgb(255,   0,   0)",
        // })
    ),
)

